


!########################################
! APPLY ZBL

IF(zbl_counter .GT. 0)THEN
  DO pn =1, pc 
    IF(pkey(pn, 3) .EQ. 1)THEN      
      zn = 0
      DO WHILE(zn .LT. zbl_counter)
        zn = zn + 1
        IF(((zbl_i(zn, 1) .EQ. pkey(pn, 4) .AND. zbl_i(zn, 2) .EQ. pkey(pn, 5)) .OR. &
           (zbl_i(zn, 1) .EQ. pkey(pn, 5) .AND. zbl_i(zn, 2) .EQ. pkey(pn, 4))) .AND. &
           zbl_l(zn))THEN
          
          za = zbl_r(zn, 1)
          zb = zbl_r(zn, 2)
          ra = zbl_r(zn, 3)
          rb = zbl_r(zn, 4)
          
          a = pkey(pn, 1)
          b = pkey(pn, 2)
          
          ! Record "A" node of spline
          zbl_ra(1) = ra 
          CALL zblfull (za, zb, zbl_ra(1), zbl_ra(2), zbl_ra(3), zbl_ra(4))
          
          
          ! Record "B" node of spline
          zbl_rb(1) = rb          
          CALL pot_search_interpolate_a(rb, pot(a:b,1), pot(a:b,2), zbl_rb(2)) 
          CALL pot_search_interpolate_a(rb, pot(a:b,1), pot(a:b,3), zbl_rb(3)) 
          CALL pot_search_interpolate_a(rb, pot(a:b,1), pot(a:b,4), zbl_rb(4)) 
          
          ! REPLACE 0 to ra with ZBL
          loop = .TRUE.
          n = a
          DO WHILE(loop)     
            IF(n .GT. b .OR. pot(n,1) .GT. ra)THEN
              loop = .FALSE.
            ELSE
              CALL zblfull (za, zb, pot(n,1), pot(n,2), pot(n,3), pot(n,4))
            END IF
            n = n + 1
          END DO
          
          !print *, zbl_i(zn, 3)
          
          ! POLY3
          IF(zbl_i(zn, 3) .EQ. 1)THEN          
            ! SPLINE ra TO rb
            CALL spline_ab_poly(zbl_ra(1:3), zbl_rb(1:3), coeffs(1:4))          
            loop = .TRUE.
            n = a
            DO WHILE(loop)     
              IF(n .GT. b .OR. pot(n,1) .GT. rb)THEN
                loop = .FALSE.
              ELSE IF(pot(n,1) .GE. ra)THEN
                CALL poly_calc(coeffs(1:4), pot(n,1), pot(n,2))             
              END IF
              n = n + 1
            END DO
            
          ! POLY 5  
          ELSE IF(zbl_i(zn, 3) .EQ. 2)THEN          
            ! SPLINE ra TO rb
            CALL spline_ab_poly(zbl_ra(1:4), zbl_rb(1:4), coeffs(1:6))          
            loop = .TRUE.
            n = a
            DO WHILE(loop)     
              IF(n .GT. b .OR. pot(n,1) .GT. rb)THEN
                loop = .FALSE.
              ELSE IF(pot(n,1) .GE. ra)THEN
                CALL poly_calc(coeffs(1:6), pot(n,1), pot(n,2))             
              END IF
              n = n + 1
            END DO
            
          ! EXP 3  
          ELSE IF(zbl_i(zn, 3) .EQ. 3)THEN          
            ! SPLINE ra TO rb
            CALL spline_ab_exp3(zbl_ra(1:3), zbl_rb(1:3), coeffs(1:4))          
            loop = .TRUE.
            n = a
            DO WHILE(loop)     
              IF(n .GT. b .OR. pot(n,1) .GT. rb)THEN
                loop = .FALSE.
              ELSE IF(pot(n,1) .GE. ra)THEN
                CALL exp_poly_calc(coeffs(1:4), pot(n,1), pot(n,2))             
              END IF
              n = n + 1
            END DO
            
          ! EXP 5  
          ELSE IF(zbl_i(zn, 3) .EQ. 4)THEN          
            ! SPLINE ra TO rb
            CALL spline_ab_exp5(zbl_ra(1:4), zbl_rb(1:4), coeffs(1:6))          
            loop = .TRUE.
            n = a
            DO WHILE(loop)     
              IF(n .GT. b .OR. pot(n,1) .GT. rb)THEN
                loop = .FALSE.
              ELSE IF(pot(n,1) .GE. ra)THEN
                CALL exp_poly_calc(coeffs(1:6), pot(n,1), pot(n,2))             
              END IF
              n = n + 1
            END DO
          
          END IF
          
          
          ! CALC f'(x), f''(x)
          loop = .TRUE.
          n = a
          DO WHILE(loop)     
            IF(n .GT. b .OR. pot(n,1) .GT. rb)THEN
              loop = .FALSE.
            ELSE IF(pot(n,1) .GE. ra)THEN
              m = n - 2
              IF(m .LT. a)THEN
                m = a
              ELSE IF((m+3) .GT. b)THEN
                m = b - 3
              END IF    
              CALL interp4dydxn(pot(n,1), pot(m:m+3,1), pot(m:m+3,2), 1, pot(n,3))
              CALL interp4dydxn(pot(n,1), pot(m:m+3,1), pot(m:m+3,2), 2, pot(n,4))              
            END IF
            n = n + 1
          END DO          
          
          ! Break out
          zn = zbl_counter
        END IF
      END DO
    END IF
  END DO
END IF
